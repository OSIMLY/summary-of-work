<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=unicode">
<title>## ERP 系统开发规范.md</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><style name="wiz_unsave_style">html, body {    font-size: 15px;}body {    font-family: Arial, Helvetica, 'Hiragino Sans GB', 微软雅黑, 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;    line-height: 1.6;    color: ;    background-color: ;    margin: 0;    padding: 20px 15px;    padding: 1.33rem 1rem;}img{    max-width: 100%;}</style><script type="text/javascript" src="file:///C:\Program Files (x86)\WizNote\WizTools\htmleditor\utils.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Program Files (x86)\WizNote\WizTools\htmleditor\localize.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Program Files (x86)\WizNote\WizTools\htmleditor\core\wizEditorForPc.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///C:\Program Files (x86)\WizNote\WizTools\htmleditor\editorHelper.js" wiz_style="unsave" charset="utf-8"></script><script type="text/javascript" src="file:///D:\Documents\summarize\summery_of_work\notes\templates\WizTemplate.js" wiz_style="unsave" charset="utf-8"></script></head>

<body spellcheck="false" ><div><div>## ERP 系统开发规范</div><div><br></div><div>### 目标</div><div><br></div><div>为了实现以下的目标，本文档为 ERP 系统的开发提供了统一的编码规范。</div><div><br></div><div>- 便于开发团队成员之间理解各自的代码，提高协作效率。</div><div>- 更好的实现功能模块的复用，减少冗余代码。</div><div>- 便于通过 IDE 检测代码格式并提供代码高亮等辅助功能。</div><div>- 为常用开发场景提供一些代码范式，减少不必要的 BUG。</div><div><br></div><div>### 整理的问题（未分类）</div><div><br></div><div>- 组件的文件头可以注明必要的信息，例如：</div><div>``` js</div><div>/**</div><div>&nbsp;* @FileName: Utils</div><div>&nbsp;* @Description: library of common methods</div><div>&nbsp;* @Date: 2017-03-06</div><div>&nbsp;* @version: 1.0</div><div>&nbsp;* @author: &lt;carl.wu@corp.to8to.com&gt;</div><div>&nbsp;*/</div><div>```</div><div><br></div><div>- 可以为 `util.js` 中的方法提供注释，如函数功能、参数及返回值说明等。</div><div>``` js</div><div>/**</div><div>&nbsp;* get label text by ID.</div><div>&nbsp;* @param {Array} list</div><div>&nbsp;* @param {Number, String} value</div><div>&nbsp;* @returns text</div><div>&nbsp;*/</div><div>```</div><div>- 对于代码中需要迭代功能的地方可以添加 `//TODO` 注释。</div><div><br></div><div>- 页面结构比较复杂时，应先通过 flex 属性布局再嵌入组件。</div><div>- 可以使用 `element` 的布局组件 `el-row`、`el-col` 实现多行多列布局。</div><div>- 尽可能保证组件的兼容性，保证较低版本浏览器能够正常显示和使用。</div><div>- 对于需要限定的 data、prop、和 methods 等内容，可以考虑通过 mixin 引入。</div><div>- 结构复杂的组件可对不同区域的模板或样式添加标注，比如：</div><div>``` html</div><div>&lt;!-- 第二层列表 --&gt;</div><div>&lt;el-submenu&gt; ... &lt;/el-submenu&gt;</div><div>&lt;!-- 第二层子节点 --&gt;</div><div>&lt;el-menu-item&gt; ... &lt;/el-menu-item&gt;</div><div>```</div><div>``` css</div><div>/* table header */</div><div>.t8t-table .table-header{ ... }</div><div>/* table body */</div><div>.t8t-table .table-body{ ... }</div><div>/* pagination */</div><div>.t8t-table .pagination{ ... }</div><div>```</div><div>- 合并代码有冲突时，先沟通再酌情处理冲突。</div><div>- 通过 Git 提交代码时，可以写明具体的变动内容。</div><div>``` bash</div><div>// 不建议</div><div>- 加了一些功能。</div><div>- 修了几个bug。</div><div><br></div><div>// 建议</div><div>- Add: table formatter 属性支持返回 html 标签。</div><div>- Fix: 低版本 chrome 浏览器布局错位的问题（v.43）。&nbsp;</div><div>```</div><div>- 扩展的表单组件使用 `t8t-form-` 前缀命名。</div><div>- 扩展的表单组件提供统一的访问接口，比如 `value` 属性和 `input`、`change` 事件。</div><div>- 组件中的图标尽可能使用 icon 字体实现，特殊图标组合为一整张图片进行引用。</div><div><br></div><div>- 功能较复杂的通用组件可以提供一个 demo 页面，用于展示组件功能。</div><div>- components 中定义子组件的顺序建议与 import 顺序同步。</div><div>- 可以为组件提供一个 `readme.md` 说明文档，存放在组件根目录内。</div><div>- 对于用户登录信息等数据建议通过全局变量和公共方法进行存取。</div><div><br></div><div>- CSS 尽可能写在 `&lt;style scoped&gt;` 标签内，避免全局泄露。</div><div>- CSS 根级选择符与组件名称一致，比如 `.t8t-table`。</div><div>- CSS 子级样式前加根级选择符限定，比如 `.t8t-table .pagination`。</div><div>- 避免在组件中使用内联样式。</div><div><br></div><div>---</div><div>### 组件</div><div><br></div><div>#### 1. 命名</div><div><br></div><div>- 页面架构组件统一使用 `app-` 前缀，例如：`app-content`</div><div>- 通用组件统一使用 `t8t-` 前缀，例如：`t8t-table`</div><div>- 业务组件分类存放在不同的文件夹内，每个模块的文件夹使用 `m-` 前缀，例如：`m-finance`</div><div>- 属性或方法采用驼峰式命名，比如 `isLoading` 、 `buttonItem`</div><div><br></div><div>#### 2. 目录</div><div><br></div><div>- 每个组件存放在单独的文件夹中</div><div>- 业务组件存放在 `src/views` 文件夹内</div><div>- 通用组件存放在 `src/compoents` 文件夹内</div><div>- 目录名采用小写，单词之间以分隔符 `-` 连接。</div><div>- 通用组件使用统一的入口文件 `index.js` 导出组件。</div><div>- 通用组件的文件名应与组件名称保持一致。</div><div><br></div><div>#### 3. 属性</div><div><br></div><div>- 功能相关的属性放置在一起。</div><div>- 属性应换行显示并根据层级进行缩进。</div><div>- 普通属性，`v-bind` 属性和 `v-on` 属性按类别写在一起，避免穿插混写。</div><div>- 属性较多时可以按照字母顺序排列。</div><div>- 属性需要设定取值类型 `type`，必要时提供初始值 `default`。</div><div>- 不同组件的同类属性采用一致的名称，尽可能简明、便于记忆，比如：</div><div>``` html</div><div>数据源：`dataSource`</div><div>字段：`field`</div><div>名称：`name`</div><div>值：`value`</div><div>验证规则：`rules`</div><div>请求参数：`args`</div><div>服务名：`service`</div><div>方法名：`method`</div><div>尺寸：`size`</div><div>显示：`show`</div><div>加载：`loading`</div><div>```</div><div><br></div><div>#### 4. 事件</div><div><br></div><div>- 名称避免与 DOM 事件冲突</div><div>- 同类事件采用相同的名称，通过描述状态的词加以区分，比如：`upload-success`、`upload-error`</div><div>- 通过 `$emit` 传递参数时，需要注意参数的顺序，同类事件的顺序保持一致。</div><div><br></div><div>#### 5. 优化代码</div><div><br></div><div>##### 1. 使用更合理的 JS 语法，例如：</div><div><br></div><div>- 声明变量时使用 `const` 和 `let` 替代 `var` 关键字。</div><div>- 定义对象时可使用缩写，简化代码。</div><div>- 回调函数可以使用箭头函数语法实现，解决 this 指向的问题。</div><div>- 使用字符串模板拼接字符串 &nbsp;``&lt;span&gt; ${this.data} &lt;/span&gt;``。</div><div>- 可以使用 `async` + `await` 实现异步操作，避免回调函数深层嵌套。</div><div><br></div><div>##### 2. 采用模块化的开发方式，例如：</div><div><br></div><div>- 实现导出、日期格式化等常用功能时，尽可能使用 `src/utils` 的工具函数。</div><div>- 配置项目过长时可以拆分成单独的文件，并用 `import` 导入。</div><div><br></div></div></body></html>